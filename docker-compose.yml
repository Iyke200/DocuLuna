version: '3.8'
services:
  bot:
    build: .
    command: python bot/main.py
    env_file: .env
    depends_on:
      - redis
      - db
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    restart: unless-stopped
  worker:
    build: .
    command: celery -A workers.tasks worker --loglevel=info
    env_file: .env
    depends_on:
      - redis
      - db
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    restart: unless-stopped
  beat:
    build: .
    command: celery -A workers.tasks beat --loglevel=info
    env_file: .env
    depends_on:
      - redis
      - db
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    restart: unless-stopped
  api:
    build: .
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000
    env_file: .env
    depends_on:
      - redis
      - db
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  db:
    image: postgres:14
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  db-backup:
    image: postgres:14
    env_file: .env
    command: >
      sh -c "while true; do
        pg_dump -U ${POSTGRES_USER} -d ${POSTGRES_DB} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql;
        sleep 86400;
      done"
    volumes:
      - ./backups:/backups
    depends_on:
      - db
    restart: unless-stopped
  redis:
    image: redis:6
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db_data: